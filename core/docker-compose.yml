version: '2.0'

services:

  # Gerenciamento

  portainer:
    image: portainer/portainer-ce:latest
    container_name: 'portainer'
    restart: always
    ports:
      - '8000:8000'
      - '9443:9443'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - 'portainer_data:/data'
    networks:
      app_net:
        ipv4_address: 172.20.1.2

  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: 'nginx-proxy-manager'
    restart: unless-stopped
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - 'nginx-proxy-manager-data:/data'
      - 'nginx-proxy-manager-letsencrypt:/etc/letsencrypt'
    networks:
      app_net:
        ipv4_address: 172.20.1.3

  consul-server-1:
    image: hashicorp/consul:1.18
    hostname: consul-server-1
    container_name: consul-server-1
    ports:
      - "8500:8500" # UI, API
      - "8600:8600/udp" # DNS
    volumes:
      - 'consul-server-1-data:/consul/data'
    command:
      - consul
      - agent
      - -server
      - -bootstrap-expect=2
      - -ui
      - -node=consul-server-1
      - -client=0.0.0.0
      - -data-dir=/consul/data
      - -retry-join=consul-server-2
      - -encrypt=${CONSUL_ENCRYPT_KEY}
    networks:
      app_net:
        ipv4_address: 172.20.1.4

  consul-server-2:
    image: hashicorp/consul:1.18
    hostname: consul-server-2
    container_name: consul-server-2
    volumes:
      - 'consul-server-2-data:/consul/data'
    command:
      - consul
      - agent
      - -server
      - -bootstrap-expect=2
      - -node=consul-server-2
      - -client=0.0.0.0
      - -data-dir=/consul/data
      - -retry-join=consul-server-1
      - -encrypt=${CONSUL_ENCRYPT_KEY}
    networks:
      app_net:
        ipv4_address: 172.20.1.5

  sonatype-nexus:
    image: sonatype/nexus3:latest
    hostname: sonatype-nexus
    container_name: sonatype-nexus
    restart: always
    volumes:
      - 'nexus-data:/nexus-data'
    ports:
      - "8081:8081"
    networks:
      app_net:
        ipv4_address: 172.20.1.10
  
  jenkins:
    image: jenkins/jenkins:lts
    privileged: true
    user: root
    ports:
      - '8080:8080'
      - '50000:50000'
    container_name: jenkins
    volumes:
      - 'jenkins_configuration:/var/jenkins_home'
      - '/var/run/docker.sock:/var/run/docker.sock'
    networks:
      app_net:
        ipv4_address: 172.20.1.20

  sonarqube:
    image: sonarqube:community
    depends_on:
      - postgres-sonar
    hostname: sonarqube
    container_name: sonarqube
    networks:
      app_net:
        ipv4_address: 172.20.1.25
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres-sonar:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"

  # Banco de Dados

  postgres-1:
    image: postgres
    restart: always
    shm_size: 128mb
    container_name: postgres-1
    ports:
      - '5432:5432'
    environment:
      POSTGRES_PASSWORD: example
    networks:
      app_net:
        ipv4_address: 172.20.2.2

  postgres-sonar:
    image: postgres:12
    hostname: postgres-sonar
    container_name: postgres-sonar
    networks:
      app_net:
        ipv4_address: 172.20.2.4
    ports:
      - 5435:5432
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data

networks:
  app_net:
    name: network_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  portainer_data:
  nginx-proxy-manager-data:
  nginx-proxy-manager-letsencrypt:
  consul-server-1-data:
  consul-server-2-data:
  nexus-data:
  jenkins_configuration:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql:
  postgresql_data: